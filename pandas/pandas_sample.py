# -*- coding: utf-8 -*-

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#----------------------------------------------------------------------------------------
# データフレーム定義
#----------------------------------------------------------------------------------------
df = pd.DataFrame({'name' : ['taro', 'hanako', 'takashi', 'yuka', 
                             'jiro', 'misa', 'takuro', 'yuri', 'junpei', 'kumi'],
                   'sex' : ['M', 'F', 'M', 'F', 'M', 'F', 'M', 'F', 'M', 'F']})

#----------------------------------------------------------------------------------------
# カラム追加
#----------------------------------------------------------------------------------------
age = pd.Series([10, 15, 20, 22, 20, 21, 30, 40, 18, 35])
weight = pd.Series([30.5, 50.5, 56.0, 60.1, 50.5, 65.1, 60.4, 55.1, 72.0, 69.0])

df.insert(len(df.columns), "weight", weight)   # 最後列に追加
df.insert(2, "age", age)               # 2列名（0-based）に追加

#----------------------------------------------------------------------------------------
# カラム削除
#----------------------------------------------------------------------------------------
df = df.drop('age', axis=1)

#----------------------------------------------------------------------------------------
# 条件指定検索
#----------------------------------------------------------------------------------------
print df[df.name == "taro"]
print df[df.sex == "F"]
print df[(55.0 < df.weight) & (df.weight < 60.0)]

#----------------------------------------------------------------------------------------
# 統計値
#----------------------------------------------------------------------------------------
print "min weight = %f" % df['weight'].min()
print "max weight = %f" % df['weight'].max()
print "average weight = %f" % df['weight'].mean()
print "weight std = %f" % df['weight'].std()
print "weight sum = %f" % df['weight'].sum()
print "number of males = %d" % df[df['sex'] == "M"].count()[0]   # countはカラム毎の非null値の数

#----------------------------------------------------------------------------------------
# CSV出力
#----------------------------------------------------------------------------------------
df.to_csv('panda.csv', index=False)   # index=Falseで左側のインデックスを付加しない
print "see panda.csv!"

#----------------------------------------------------------------------------------------
# CSV読込
#----------------------------------------------------------------------------------------
df = pd.read_csv('sample.csv', header=None)   # ヘッダなしの場合

#----------------------------------------------------------------------------------------
# NAの補完
#----------------------------------------------------------------------------------------
df = df.fillna(df.mean())        # 数値列を平均値で補完
df = df.fillna(df.mode().loc[0])  # ラベル列を最頻値で補完

#----------------------------------------------------------------------------------------
# スライシング
#----------------------------------------------------------------------------------------
print df.loc[0:0]                # 0行目
print df.loc[1:5]                # 1-5行目
print df.loc[:][0]               # 0列目
print df.loc[:][[0,1,3]]         # 0,1,3列目

#----------------------------------------------------------------------------------------
# まとめ情報
#----------------------------------------------------------------------------------------
print df.describe()

#----------------------------------------------------------------------------------------
# グラフ化
#----------------------------------------------------------------------------------------
df = pd.DataFrame({'height' : 7.5 * np.random.randn(300) + 170})

# ヒストグラム
df.height.hist()
plt.show()

#----------------------------------------------------------------------------------------
# マップ
#----------------------------------------------------------------------------------------
df = df.loc[:10]

# 単一カラムのマップ
df["weight"] = df.height.map(lambda x : x*x/1e4 * 22 + 10*np.random.randn(1)[0])
df["sex"] = df.height.map(lambda x : 'M' if x >= 165 else 'F')

# すべてのカラムを同じ条件でマップ
print df.applymap(lambda x : x + x)

# 複数のカラムを使ってマップ
print df.apply(lambda x : x.weight/(x.height*x.height/1e4), axis=1)  # BMI指数

#----------------------------------------------------------------------------------------
# テーブル結合
#----------------------------------------------------------------------------------------
df1 = pd.DataFrame({'weight' : np.random.randn(10)*5 + 50})
df2 = pd.DataFrame({'weight' : np.random.randn(10)*10 + 160})

df = pd.concat([df1,df2], axis=1)                      # column方向に結合
df = pd.concat([df1,df2], axis=0)                      # row方向に結合
df = pd.concat([df1,df2], axis=0, ignore_index=True)   # row方向に結合（index再採番）

#----------------------------------------------------------------------------------------
# グルーピング
#----------------------------------------------------------------------------------------
df = pd.DataFrame({'sex' : ['F','F','F','F','F','F','M','M','M','M','M','M'], 
                   'age' : [10,10,20,20,30,30, 10,10,20,20,30,30],
                   'interest' : [1,1,2,3,1,3,3,3,2,3,1,2]})

grouped = df.groupby(['sex', 'age'])
print grouped.mean()
print grouped.max()
print grouped.aggregate(lambda a : np.std(a) / np.mean(a))

#----------------------------------------------------------------------------------------
# 差分取得
#----------------------------------------------------------------------------------------
df = pd.DataFrame({'time_of_event' : [0, 1, 3, 10, 12, 15, 20, 29, 30,35]})
print df.time_of_event.diff().dropna()   # 先頭値は差分が未定義でNAとなるため、dropしておく

#----------------------------------------------------------------------------------------
# 相関係数
#----------------------------------------------------------------------------------------
df = pd.DataFrame({'f1': [0.1, 0.2, 0.3, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],  # positive
                   'f2': [0,1,2,0,1,2,0,1,2],                            # non
                   'f3': [10,9,8,7,6,5,4,3,2],                           # negative
                   'label': [1,1,1,2,2,2,3,3,3],})
print df.corr()
